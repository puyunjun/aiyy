<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017\12\23 0023
 * Time: 9:50
 */
namespace app\user\home;
use think\Controller;
use app\user\model\home\User As UserModel;
use think\Session;
use think\Validate;
use think\Db;

class Index extends Common
{
    public $model;
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //继承公共基础类判断是否登录
        $this->model = new UserModel();
    }

    public function index(){
        /*用户首页方法*/

        if(request()->isGet()){

            $this->assign('user_base_info',$this->model->user_base_info());

            //var_dump(UserModel::user_privilege());exit;
            $param_data = false;
            if($param = request()->param('param_name')){
                $param_data = session($param);
            }
            $this->assign('param_data',$param_data);
            return  $this->fetch();
        }

    }

    public function allow_privilege(){
        /*判断会员截止时间是否到期*/

        $user_info = UserModel::user_privilege();

            //判断会员是否有权限查看 详情
            /*if($user_info->allow_priview_list == 4 || $user_info->allow_priview_list == 0){
                  $data = array('status'=>false,'msg'=>'无法查看，权限太低，请升级会员或者完善资料');
                  return json($data);
            }*/
            return json(1);
    }

    //用户余额升级会员方法
    public function pay(){
        //获取升级的id
        $group_id = request()->post('kt');

        //查询用户账户余额
        $user_base = UserModel::where('id',UID)->field('group_id,account')->find();

        //更新用户权限组
        $price_type = request()->post('price_type');
        //升级当前会员所需的金额
        $fee = Db::name('user_group')->where('id',$group_id)->value($price_type);

        if(bccomp($user_base['account'],$fee,2)<0){
            return json('余额不足已支付当前会员，请选择其他方式');
        }

        if($price_type === 'price_y'){
            //充值月会员
            $member_deadline = request()->time()+3600*24*30;
        }elseif($price_type === 'price_m'){
            //充值半年会员
            $member_deadline = request()->time()+3600*24*30*6;
        }elseif($price_type === 'price_a'){
            //充值年费会员
            $member_deadline = request()->time()+3600*24*30*12;
        }elseif($price_type === 'prestore'){
            //充值预存机制会员
            $member_deadline = 0;//无过期时间
        }
        //升级记录数据
        $up_data = array(
            'uid'=>UID,
            'total_money'=>$fee,
            'back_group_id'=>$group_id,
            'recharge_type'=>'account',
            'status'=>1,
            'create_time'=>request()->time(),
            'create_ip'=>get_client_ip(1),
        );
        Db::startTrans();
        try{
            //扣除会员余额

            $res = UserModel::where('id',UID)->setDec('account',$fee);

            //升级前的会员组id
            $old_group_id = UserModel::where('id',UID)->value('group_id');
            //添加升级记录
            $up_data['font_group_id'] = $old_group_id;
            $up_member_re = Db::name('upgrade_member')->insert($up_data);
            $re = UserModel::where('id',UID)
                ->update(array('group_id'=>$group_id,'member_deadline'=>$member_deadline));
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }
        if($re && $up_member_re && $res){
            return json('升级成功');
        }else{
            return json('升级失败，请重试');
        }

    }

    //用户绑定手机号
    public function bindphone(){

        $rule = array(
            'rule'=>
                array(
                    'phone'=>'require|number|length:11|regex:/^1[34578]\d{9}$/|unique:__user__',
                ),
            'msg'=>array(
                'phone.unique'      => '手机已被绑定',
                'phone.require'     => '请输入手机号',
                'phone.number'     => '请输入正确的手机号',
                'phone.length'      =>'输入11位手机号',
                'phone.regex'       =>'手机号非法'

            ),
            'data'=>array(
                'phone'  => request()->post('phone'),
            ),
        );
        $validate = new Validate($rule['rule'], $rule['msg']);
        $result = $validate->check($rule['data']);
        if (!$result) {
            return json($validate->getError());   //返回验证消息
            // return $this->redirect('http://www.aiyy.com/user/my_info/show/id/1.html');
        } else {

            db('user')->where('id', UID)->update(['is_bind_phone' => 1,'phone'=>$rule['data']['phone']]);

            return json(true);
            // $this->redirect('user/my_info/index');
        }


    }
}