<?php

namespace app\index\controller;

use think\Controller;
use wxpay\database\WxPayResults;
use wxpay\database\WxPayUnifiedOrder;
//use wxpay\NativePay; 扫码支付
use wxpay\WxPayApi;
use wxpay\WxPayConfig;
use wxpay\JsApiPay;
use think\Db;
class Wxpay  extends Controller
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }

    /**
     * 微信支付 回调逻辑处理
     * @return string
     */
    public function notify(){

        $wxData = file_get_contents("php://input");

        //file_put_contents('/tmp/2.txt',$wxData,FILE_APPEND);
        try{
            $resultObj = new WxPayResults();
            $wxData = $resultObj->Init($wxData);
        }catch (\Exception $e){
            $resultObj ->setData('return_code','FAIL');
            $resultObj ->setData('return_msg',$e->getMessage());
            return $resultObj->toXml();
        }

        if ($wxData['return_code']==='FAIL'||
            $wxData['return_code']!== 'SUCCESS'){
            $resultObj ->setData('return_code','FAIL');
            $resultObj ->setData('return_msg','error');
            return $resultObj->toXml();
        }
        //TODO 根据订单号 out_trade_no 来查询订单数据
        $out_trade_no = $wxData['out_trade_no'];
        $attach = $wxData['attach'];   //附带升级会员组id  以及会员id  金额
        //此处为举例
        //升级会员等级业务更新
        $attach_info = json_decode($attach);
        $group_id = $attach_info->group_id;
        $uid = $attach_info->uid;
        $point = $attach_info->money;   //用户积分点  积分为用户微信消费金额总额
        //更新用户积分点数
        //事物
        $user = Db::name('user');
        //更新用户权限组
        $price_type = $attach_info->price_type;
        if($price_type === 'price_y'){
            //充值月会员
            $member_deadline = request()->time()+3600*24*30;
        }elseif($price_type === 'price_m'){
            //充值半年会员
            $member_deadline = request()->time()+3600*24*30*6;
        }elseif($price_type === 'price_a'){
            //充值年费会员
            $member_deadline = request()->time()+3600*24*30*12;
        }elseif($price_type === 'prestore'){
            //充值预存机制会员
            $member_deadline = 0;//无过期时间
        }

        //升级记录数据
        $up_data = array(
            'uid'=>$uid,
            'total_money'=>$point,
            'back_group_id'=>$group_id,
            'recharge_type'=>'weixin',
            'status'=>1,
            'create_time'=>request()->time(),
            'create_ip'=>get_client_ip(1),
        );
        Db::startTrans();
        try{
            $res = $user->where('id',"$uid")->setInc('point',$point);

            //升级前的会员组id
            $old_group_id = $user->where('id',$uid)->value('group_id');
            //添加升级记录
            $up_data['font_group_id'] = $old_group_id;
            $up_member_re = Db::name('upgrade_member')->insert($up_data);
            $re = $user->where('id',"$uid")
                ->update(array('group_id'=>$group_id,'member_deadline'=>$member_deadline));
            //预存金额修改用户余额数,加上赠送金额
            if($price_type === 'prestore'){
                $gift_money = Db::name('user_group')->where('id',$group_id)->value('gift_money');
                $user->where('id',$uid)->setInc('account',bcadd($point,$gift_money,2));
            }
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
        }

        if($re!== false && $res && $up_member_re){
            //返回SUCCESS给微信服务器
            /*程序执行完后必须打印输出“SUCCESS”（不包含引号）。如果商户反馈给支付宝的字符不是SUCCESS这7个字符，微信服务器会不断重发通知，直到超过24小时22分钟。
            一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；
            导致数据库一直更新或者增加
            */
            $resultObj ->setData('return_code','SUCCESS');
            $resultObj ->setData('return_msg','OK');
            return $resultObj->toXml();
        }
        /*if (!$order || $order->pay_status == 1){
            $resultObj ->setData('return_code','SUCCESS');
            $resultObj ->setData('return_msg','OK');
            return $resultObj->toXml();
        }*/
        //TODO 数据更新 业务逻辑处理 $order
    }

        /*
         *
         * 接受支付参数
         * @param int $type   付费项目，如充值或者升级会员
         * */
    public function index(){
        //获取订单信息  会员升级或者其他订单信息
        $member_fee_info = $this->get_become_member_data()['upgrade_member'];
        //获取用户id

        $member_fee_info['uid'] = $this->get_become_member_data()['uid'];

        //①、获取用户openid
        $tools = new JsApiPay();
        $openId = $tools->getOpenid($member_fee_info)['openid'];  //获取微信openid
        $order_info = json_decode(request()->param('state'));

        $group_arr =  Db::name('user_group')->where('id',$order_info->group_id)->field($order_info->price_type.',group_name')->find();
        $body_info ="升级".$group_arr['group_name'];          //交易信息商品名
        $money=bcmul($group_arr[$order_info->price_type],100,0); //交易金额  微信是以分为单位
        $attach  = json_encode(
            array(
                'group_id'=>$order_info->group_id,
                'uid'=>$order_info->uid,
                'money'=>$group_arr[$order_info->price_type],
                'price_type'=>$order_info->price_type)
        );   //附带信息    money 传入以便修改用户积分
        //②、统一下单
        $input = new WxPayUnifiedOrder();
        $input->SetBody($body_info);
        $input->SetAttach($attach);
        $input->setOutTradeNo(WxPayConfig::MCHID.date("YmdHis"));
        $input->SetTotalfee($money);           //测试阶段写为1
        $input->SetTimestart(date("YmdHis"));
        $input->SetTimeexpire(date("YmdHis", time() + 600));
        $input->SetGoodstag("test");
        $input->setNotifyUrl('http://'.$_SERVER['HTTP_HOST'].'/index/wxpay/notify');
        $input->SetTradetype("JSAPI");
        $input->SetOpenid($openId);
        $order = WxPayApi::unifiedOrder($input);
        $jsApiParameters = $tools->GetJsApiParameters($order);
        //获取共享收货地址js函数参数
        $editAddress = $tools->GetEditAddressParameters();
        $this->assign('jsApiParameters',$jsApiParameters);
        $this->assign('editAddress',$editAddress);
        $this->assign('money',$group_arr[$order_info->price_type]);
        return $this->fetch();
    }

    //升级会员接收方法

    public function get_become_member_data(){
        //获取选择的会员组id
        //会员升级订单信息  若为其他支付信息则另外获取信息.
        $group_id = intval(request()->post('kt'));

        $uid = intval(request()->post('get_uid'));

        $price_type = request()->post('price_type') ? request()->post('price_type') : '';
            //拼接sql语句  防止微信接口调用返回后无法获取数据而导致报错
        $field = $price_type ? $price_type.',group_name' : '';
        //开通
        $map = [
            'id'=>$group_id,
        ];
        //获取该会员组所需的费用

        $member_fee_info = Db::name('user_group')->where($map)->field($field)->find();

        return $data =[
            'upgrade_member'=>[

                'price_type'=>$price_type,
                'group_id'=>$group_id,

            ],
            'uid'=>$uid,

        ];
        //调用支付方法

        //$this->pay_money($member_fee_info[$price_type],$group_id,"升级".$member_fee_info['group_name']);

        //$this->index($member_fee_info[$price_type],$group_id,"升级".$member_fee_info['group_name']);
    }

}
